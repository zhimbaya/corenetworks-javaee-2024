package service;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import model.Pedido;

public class PedidosService {
	
	String dir="c:\\temp\\pedidos.txt";
	Path path;
	//en constructor comprobamos si el fichero existe, si no, lo creamos
	public PedidosService() {
		File file=new File(dir);
		if(!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		path=Path.of(dir);
	}
	
	
	public void guardarPedido(String producto, LocalDate fechaPedido,double precio) {
		String linea=producto+","+fechaPedido+","+precio;		
		try {
			Files.writeString(path, linea+System.lineSeparator(), StandardOpenOption.APPEND);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public Pedido pedidoMasReciente() {		
		try {				
				return Files.lines(path)
				.map(s->new Pedido(s.split(",")[0],
						LocalDate.parse(s.split(",")[1]),
						Double.parseDouble(s.split(",")[2])))
				.max((a,b)-> a.getFechaPedido().compareTo(b.getFechaPedido()))				
				.orElse(null);
			}
			catch(IOException ex) {
				ex.printStackTrace();
				return null;	
			}		
	}
	
	public List<Pedido> pedidosPrecio(double precioMax) {
		try {
			return Files.lines(path)
				.map(s->new Pedido(s.split(",")[0],
						LocalDate.parse(s.split(",")[1]),
						Double.parseDouble(s.split(",")[2])))
				.filter(n->n.getPrecio()<=precioMax)
				.toList();
			}
			catch(IOException ex) {
				ex.printStackTrace();
				return List.of();
			}
	}
	
	public List<Pedido> anteriores(int meses){
		LocalDate referencia=LocalDate.now().minusMonths(meses);
		try {
			return Files.lines(path)
			.map(s->new Pedido(s.split(",")[0],
					LocalDate.parse(s.split(",")[1]),
					Double.parseDouble(s.split(",")[2])))
			.filter(s->s.getFechaPedido().isBefore(referencia))
			.toList();
		}
			catch(IOException ex) {
				ex.printStackTrace();
				return null;
			}
		
		
	}
}
