package service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import modelo.Cesta;

public class PedidoService {
	Cesta cesta = new Cesta();
	ArrayList<Cesta> cestaList = new ArrayList<>();

	
	public boolean alta(String producto, int precio, LocalDate fecha) {
			if(cestaList.stream().noneMatch(c->c.getProducto().equals(producto)
					&&c.getPrecio()==precio&&c.getFechaPedido().equals(fecha)));
		return true;
	}
	
	public Cesta recientes () {
		//cestaList.sort((a,b) -> a.getFechaPedido().compareTo(b.getFechaPedido()));
				
		return cestaList.stream()
				.max((a,b)->a.getFechaPedido().compareTo(b.getFechaPedido()))
				.orElse(null);
				
	}
	
	public Double precioInferior (double p) {
			return cestaList.stream()
					.filter(c->c.getPrecio()<p)
					.collect(Collectors.averagingDouble(c->c.getPrecio()));
					
	}
	
	public List<Cesta> anteriores (int meses) {
		/*ArrayList<Cesta> res=new ArrayList<Cesta>();
		LocalDate referencia=LocalDate.now().minusMonths(meses);
		for(Cesta c:cestaList) {
			if(c.getFechaPedido().isBefore(referencia)) {
				res.add(c);
			}
		}*/
		Comparator<Cesta> byDate = (a,b) -> a.getFechaPedido().compareTo(b.getFechaPedido());
		
		
		return byDate;
				
				
	}
	
	
}
