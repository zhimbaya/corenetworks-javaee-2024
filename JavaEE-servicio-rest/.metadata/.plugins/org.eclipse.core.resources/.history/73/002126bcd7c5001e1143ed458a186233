package service.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

public class ServiceConfig {
	@EnableJpaRepositories(basePackages = "dao.interfaces", entityManagerFactoryRef = "factory", transactionManagerRef = "txManager") //Spring JPA
	@ComponentScan(basePackages = { "service.implementations" })
	@Configuration // spring
	@EnableTransactionManagement //HABILITA LA TRANSACCIONALIDAD USANDO ANOTACIONES @Transaccional
	public class ServiceConfig {
		String driver = "com.mysql.cj.jdbc.Driver";
		String cadena = "jdbc:mysql://localhost:3306/tienda";
		String usuario = "root";
		String pw = "root";

		// creaci贸n del objeto DataSource con los datos de conexi贸n a la BD
		@Bean
		public DataSource crearDatasource() {
			DriverManagerDataSource data = new DriverManagerDataSource();
			data.setDriverClassName(driver);
			data.setUrl(cadena);
			data.setUsername(usuario);
			data.setPassword(pw);
			return data;
		}

		// adaptador de Hibernate
		@Bean
		public HibernateJpaVendorAdapter adapter() {
			HibernateJpaVendorAdapter adp = new HibernateJpaVendorAdapter();
			adp.setDatabasePlatform("org.hibernate.dialect.MySQLDialect");
			return adp;
		}

		// factoria EntityManager: Objeto para acceder a capa de persistencia con JPA
		@Bean
		public LocalContainerEntityManagerFactoryBean factory() {
			LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();
			factory.setPersistenceUnitName("tiendaPU");
			factory.setDataSource(crearDatasource());
			factory.setPackagesToScan("model");
			factory.setJpaVendorAdapter(adapter());
			return factory;
		}

		// creaci贸n y configuraci贸n del transactionmanager
		@Bean
		public JpaTransactionManager txManager() {
			JpaTransactionManager manager = new JpaTransactionManager();
			manager.setEntityManagerFactory(factory().getObject());
			return manager;
		}
}
